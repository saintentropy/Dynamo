<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
                    xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
                    xmlns:controls="clr-namespace:Dynamo.Controls;assembly=DynamoCoreWpf"
                    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:interactivity="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:nodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore"
                    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
                    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                    xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
                    xmlns:views="clr-namespace:Dynamo.UI.Views;assembly=DynamoCoreWpf">

    <!-- Templates

    Use this to add color resources:
    ==========================================
    <Color x:Key="ColorKey" >#FFFFFFAE</Color>

    You can use this to create a style for a button, just change the TargetType or add
    other control separated by commas and add setter nodes to change properties:
    ==========================================
    <Style x:Key="SimpleStyle" TargetType="Button">
        <Setter Property="Background" Value="Red" />
    </Style>

    -->

    <!--  Add your resources here  -->

    <controls:SnapRegionMarginConverter x:Key="SnapRegionMarginConverter" />
    <controls:PortToAttachmentConverter x:Key="PortToAttachmentConverter" />
    <BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter" />
    <SolidColorBrush x:Key="PreferencesWindowButtonMouseOverFontColor" Color="#CDCBCB" />
    <SolidColorBrush x:Key="PrimaryCharcoal200Brush" Color="#9BD5EF" />
    <SolidColorBrush x:Key="PortUsingDefaultValueMarkerColor" Color="#6AC0E7" />
    <SolidColorBrush x:Key="DarkGreyBrush" Color="#4A4A4A" />
    <SolidColorBrush x:Key="PortUseLevelsCheckBoxColor" Color="#808080" />
    <Style x:Key="PopupButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#4D4D4D" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Name="border"
                                Padding="4"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="0"/>
                        <ContentPresenter Name="contentpresenter"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            TextBlock.Foreground="#4D4D4D"
                                            TextBlock.FontSize="13px" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="contentpresenter" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#99E0FF" />
                            <Setter TargetName="border" Property="Opacity" Value="0.3" />
                            <Setter Property="Foreground" Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="#99E0FF" />
                            <Setter TargetName="border"
                                    Property="Opacity"
                                    Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type viewModels:PortViewModel}">
        <!--  Grid that contains the entire port  -->
        <Grid Name="mainGrid" HorizontalAlignment="Stretch">
            <!--
                The main border shows rounded edges and changes color according to multiple conditions
                This logic is defined in the ViewModel. None of the elements in this Border are interactive, so they
                can live in the lowest level of Z-Order
            -->
            <Border x:Name="mainBorder" UseLayoutRounding="true" >
                <!--  DockPanel that positions the visible port name and the UseLevelArrow  -->
                <DockPanel x:Name="mainDockPanel" FlowDirection="LeftToRight">
                    <Grid Name="portNameGrid"
                          DockPanel.Dock="Left"
                          IsEnabled="{Binding Path=IsEnabled}"
                          IsHitTestVisible="True"
                          ToolTipService.ShowDuration="60000">
                        <Rectangle Fill="Transparent"
                                   IsHitTestVisible="{Binding IsHitTestVisible}"
                                   SnapsToDevicePixels="True">
                            <interactivity:Interaction.Triggers>
                                <views:HandlingEventTrigger EventName="MouseEnter">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeave">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                            </interactivity:Interaction.Triggers>
                            <Rectangle.Margin>
                                <MultiBinding Converter="{StaticResource SnapRegionMarginConverter}">
                                    <Binding ElementName="portNameTb" Path="ActualWidth" />
                                    <Binding Path="PortModel" />
                                </MultiBinding>
                            </Rectangle.Margin>
                        </Rectangle>
                        <TextBlock Name="portNameTb"
                                   Width="Auto"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   FontSize="17px"
                                   FontWeight="Medium"
                                   Foreground="#DCDCDC"
                                   IsHitTestVisible="False"
                                   Text="{Binding Path=PortName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Margin" Value="13,0,10,7" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsPortCondensed}" Value="True" />
                                                <Condition Binding="{Binding Path=IsConnected}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Margin" Value="3,2,0,0" />
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsPortCondensed}" Value="True" />
                                                <Condition Binding="{Binding Path=IsConnected}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Margin" Value="2,-2,0,0" />
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Grid.Style>
                            <Style>
                                <Setter Property="Grid.Height" Value="{Binding Path=Height}" />
                                <Setter Property="Grid.Margin" Value="{Binding Path=MarginThickness}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                        <Setter Property="Grid.Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                                        <Setter Property="Grid.Margin" Value="0,0,0,1" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                    </Grid>
                    <Grid Width="50"
                          DockPanel.Dock="Left"
                          Visibility="{Binding Path=UseLevels, Converter={StaticResource VisibleIfTrueConverter}, FallbackValue=Collapsed}" />
                    <Grid Name="useLevelArrowGrid"
                          HorizontalAlignment="Right"
                          Visibility="{Binding Path=UseLevelVisibility}">
                        <Label x:Name="useLevelArrow"
                               Height="{Binding Path=Height}"
                               Margin="0,0,0,8"
                               Padding="0"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               HorizontalContentAlignment="Center"
                               VerticalContentAlignment="Center"
                               Content="&gt;"
                               FontSize="16px"
                               FontWeight="Medium"
                               Foreground="{StaticResource PrimaryCharcoal200Brush}"
                               IsHitTestVisible="False"/>
                        <Grid.Style>
                            <Style>
                                <Setter Property="Grid.Height" Value="{Binding Path=Height}" />
                                <Setter Property="Grid.Margin" Value="0,0,10,0" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                        <Setter Property="Grid.Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                                        <Setter Property="Grid.Margin" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                    </Grid>
                </DockPanel>
                <!--  Inputs and outputs have different corner radius and border conditions  -->
                <Border.Style></Border.Style>
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Background" Value="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="Height" Value="29px" />
                        <Setter Property="BorderBrush" Value="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                <Setter Property="CornerRadius" Value="0,11,11,0" />
                                <Setter Property="BorderThickness" Value="0,2,2,2" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                <Setter Property="CornerRadius" Value="11,0,0,11" />
                                <Setter Property="BorderThickness" Value="2,2,0,2" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                <Setter Property="CornerRadius" Value="0" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                                <Setter Property="Width" Value="16px" />
                            </DataTrigger>
                            <!--  Used for styling output ports when they are 'condensed' i.e. on a code block  -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=IsPortCondensed}" Value="True" />
                                    <Condition Binding="{Binding Path=IsConnected}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Background" Value="{Binding PortBackgroundColor}" />
                                    <Setter Property="BorderBrush" Value="{Binding PortBorderBrushColor}" />
                                    <Setter Property="BorderThickness" Value="2,2,0,2" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=IsPortCondensed}" Value="True" />
                                    <Condition Binding="{Binding Path=IsConnected}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Background" Value="#666666" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
            <!--  Blue marker that appears to the left side of an input port, indicating it's using its default value.  -->
            <!--
                Interactive overlay for the port, highlights the port on MouseOver and
                contains MouseClick event handling and ToolTip logic. Since the overlay is interactive, it needs to
                live higher up in the Z-Order than the non-interactive elements in the mainBorder for MouseOver and
                MouseClick events to fire.
            -->
            <!--
                Contains the interactive elements which need to have the highest-level of Z-Order so that they
                may be interacted with *above* the mainBorderHighlightOverlay layer.
                This is the UseLevelsSpinner and UseLevelsControl.
            -->
            <DockPanel Name="interactionControlsDockPanel"
                       Height="29px"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Center"
                       FlowDirection="LeftToRight"
                       IsHitTestVisible="True"
                       Visibility="{Binding Path=UseLevelVisibility}">
                <Rectangle x:Name="useLevelArrowHighlightOverlay"
                           Width="15"
                           Height="15px"
                           HorizontalAlignment="Right"
                           DockPanel.Dock="Right"
                           IsHitTestVisible="True"
                           Visibility="{Binding Path=UseLevelVisibility}">
                    <interactivity:Interaction.Triggers>
                        <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownOnLevelCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Rectangle.Style>
                        <Style TargetType="{x:Type Rectangle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                    <Setter Property="Margin" Value="0,0,10,0" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                    <Setter Property="Margin" Value="0,0,8,0" />
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" Value="#E5E2DE" />
                                    <Setter Property="Opacity" Value="0.3" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Fill" Value="#E5E2DE" />
                                    <Setter Property="Opacity" Value="0.0" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
                <TextBlock Name="fakePortNameTb"
                           Width="Auto"
                           Margin="13,0,10,7"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           DockPanel.Dock="Left"
                           FontSize="17px"
                           FontWeight="Medium"
                           Foreground="Transparent"
                           IsHitTestVisible="False"
                           Opacity="0.4"
                           Text="{Binding Path=PortName}" />
                <dynui:UseLevelSpinner x:Name="useLevelControl"
                                       Width="50"
                                       Height="20"
                                       Margin="-3,0,0,0"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Center"
                                       DockPanel.Dock="Right"
                                       KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                                       Level="{Binding Path=Level, Mode=TwoWay}"
                                       Visibility="{Binding UseLevelSpinnerVisible, UpdateSourceTrigger=PropertyChanged}" />
                <dynui:UseLevelPopup x:Name="UseLevelPopup"
                                     AllowsTransparency="True"
                                     IsOpen="{Binding Path=ShowUseLevelMenu}"
                                     Placement="Right"
                                     StaysOpen="False">
                    <Grid Background="Transparent">
                        <Grid.Resources>
                            <ResourceDictionary>
                                <Style TargetType="CheckBox">
                                    <Setter Property="Foreground" Value="{StaticResource DarkGreyBrush}" />
                                    <Setter Property="Margin" Value="0" />
                                    <Setter Property="FontSize" Value="14px" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type CheckBox}">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="20px" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <Rectangle x:Name="outerRectangle"
                                                               Grid.Column="0"
                                                               Width="14px"
                                                               Height="14px"
                                                               Stroke="{StaticResource PortUseLevelsCheckBoxColor}"
                                                               StrokeThickness="2" />
                                                    <Rectangle x:Name="highlightRectangle"
                                                               Grid.Column="0"
                                                               Width="14px"
                                                               Height="14px"
                                                               Fill="Transparent"
                                                               Stroke="{StaticResource PortUseLevelsCheckBoxColor}"
                                                               StrokeThickness="2" />
                                                    <Path x:Name="tick"
                                                          Grid.Column="0"
                                                          Width="14px"
                                                          Height="14px"
                                                          Data="M3,7 l3,3 l5,-6"
                                                          Opacity="0"
                                                          Stretch="None"
                                                          Stroke="White"
                                                          StrokeThickness="2" />
                                                    <ContentPresenter x:Name="content"
                                                                      Grid.Column="1"
                                                                      Margin="4,0,0,0"
                                                                      HorizontalAlignment="Center"
                                                                      VerticalAlignment="Center"
                                                                      TextBlock.Foreground="{StaticResource DarkGreyBrush}" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="highlightRectangle" Property="Fill" Value="LightGray" />
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="outerRectangle" Property="Fill" Value="{StaticResource PortUseLevelsCheckBoxColor}" />
                                                        <Setter TargetName="tick" Property="Opacity" Value="1.0" />
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="False">
                                                        <Setter TargetName="outerRectangle" Property="Fill" Value="Transparent" />
                                                        <Setter TargetName="tick" Property="Opacity" Value="0.0" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter TargetName="highlightRectangle" Property="Stroke" Value="LightGray" />
                                                        <Setter TargetName="content" Property="TextBlock.Foreground" Value="LightGray" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ResourceDictionary>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0"
                              Margin="1,0,0,0"
                              Data="M 0,10 L 12,5 12,15 Z"
                              Fill="White"
                              Stroke="#999999" />
                        <Border Grid.Column="1"
                                Padding="5"
                                Background="White"
                                BorderBrush="#999999 "
                                BorderThickness="1"
                                CornerRadius="2">
                            <StackPanel>
                                <CheckBox Name="UseLevel"
                                          Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Command="{Binding Path=UseLevelsCommand}"
                                          CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                          Content="{x:Static p:Resources.UseLevelPopupMenuItem}"
                                          IsChecked="{Binding Path=UseLevels, Mode=OneWay}"
                                          Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource VisibleIfTrueConverter}}" />
                                <CheckBox Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Command="{Binding Path=KeepListStructureCommand}"
                                          CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                          Content="{x:Static p:Resources.UseLevelKeepListStructurePopupMenuItem}"
                                          IsChecked="{Binding Path=ShouldKeepListStructure, Mode=OneWay}"
                                          IsEnabled="{Binding ElementName=UseLevel, Path=IsChecked}"
                                          Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource VisibleIfTrueConverter}}" />
                                <CheckBox Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Content="{x:Static p:Resources.PortViewContextMenuUserDefaultValue}"
                                          IsChecked="{Binding Path=UsingDefaultValue, Mode=TwoWay}"
                                          Visibility="{Binding UseDefaultValueCheckBoxVisibility, Converter={StaticResource VisibleIfTrueConverter}}" />
                                <Button Margin="0,3"
                                        HorizontalAlignment="Left"
                                        Command="{Binding Path=BreakConnectionsCommand}"
                                        Content="{x:Static p:Resources.BreakConnectionPopupMenuItem}"
                                        IsEnabled="{Binding OutputPortBreakConnectionsButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource VisibleIfTrueConverter}}">
                                </Button>
                                <Button Margin="0,3"
                                        HorizontalAlignment="Left"
                                        Command="{Binding Path=HideConnectionsCommand}"
                                        Content="{Binding ShowHideWiresButtonContent, UpdateSourceTrigger=PropertyChanged}"
                                        IsEnabled="{Binding HideWiresButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource VisibleIfTrueConverter}}" />
                            </StackPanel>
                        </Border>
                        <Path Grid.Column="1"
                              Data="M 0,7.5 L 1,7.5 L 1,12.5 L0,12.5 Z"
                              Fill="White"
                              Stroke="White" />
                    </Grid>
                </dynui:UseLevelPopup>
            </DockPanel>
            <Grid.Style>
                <Style>
                    <Setter Property="Grid.Height" Value="35px" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                            <Setter Property="Grid.Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>
    </DataTemplate>
</ResourceDictionary>